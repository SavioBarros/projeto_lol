#!/usr/bin/env python3
"""
Script para testar as corre√ß√µes do LoL Opening Bot
"""

import asyncio
import os
import sys
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

async def test_mock_provider():
    """Teste com MockProvider"""
    print("üß™ TESTANDO MOCK PROVIDER")
    print("=" * 50)
    
    # For√ßar MockProvider
    original_provider = os.environ.get('ODDS_PROVIDER')
    os.environ['ODDS_PROVIDER'] = 'MOCK'
    
    try:
        from src.providers import create_provider
        provider = create_provider()
        
        # Testar upcoming odds
        print("üìÆ Testando upcoming odds...")
        upcoming = await provider.get_upcoming_odds()
        print(f"‚úÖ {len(upcoming)} partidas upcoming encontradas")
        
        for match in upcoming:
            print(f"  ‚öîÔ∏è {match['match']} ({match['league']})")
            odds = match.get('odds', {})
            print(f"    üí∞ {len(odds)} mercados dispon√≠veis")
        
        # Testar live odds
        print("\nüî¥ Testando live odds...")
        live = await provider.get_live_odds()
        print(f"‚úÖ {len(live)} partidas ao vivo encontradas")
        
        for match in live:
            print(f"  üì∫ {match['match']} ({match['league']})")
        
        print("\n‚úÖ MockProvider funcionando corretamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no MockProvider: {e}")
        return False
    finally:
        # Restaurar configura√ß√£o original
        if original_provider:
            os.environ['ODDS_PROVIDER'] = original_provider
        elif 'ODDS_PROVIDER' in os.environ:
            del os.environ['ODDS_PROVIDER']

async def test_pandascore_provider():
    """Teste com PandaScoreProvider"""
    print("\nüèÜ TESTANDO PANDASCORE PROVIDER")
    print("=" * 50)
    
    token = os.getenv('PANDASCORE_TOKEN')
    if not token:
        print("‚ö†Ô∏è PANDASCORE_TOKEN n√£o configurado - pulando teste")
        return False
    
    print(f"üîë Token: {token[:8]}...{token[-4:]}")
    
    # For√ßar PandaScoreProvider
    os.environ['ODDS_PROVIDER'] = 'PANDASCORE'
    
    try:
        from src.providers import create_provider
        provider = create_provider()
        
        # Teste de conex√£o
        print("üîå Testando conex√£o...")
        success, message = await provider.test_connection()
        print(f"{'‚úÖ' if success else '‚ùå'} {message}")
        
        if not success:
            return False
        
        # Validar acesso √† API
        print("üîç Validando acesso √† API...")
        valid = await provider.validate_api_access()
        print(f"{'‚úÖ' if valid else '‚ùå'} Valida√ß√£o: {'OK' if valid else 'FALHOU'}")
        
        if not valid:
            return False
        
        # Testar busca de partidas upcoming
        print("üìÆ Testando upcoming matches...")
        upcoming = await provider.get_upcoming_odds()
        print(f"‚úÖ {len(upcoming)} partidas upcoming encontradas")
        
        for match in upcoming[:3]:  # Mostrar apenas 3
            print(f"  ‚öîÔ∏è {match['match']} ({match.get('league', 'N/A')})")
            odds = match.get('odds', {})
            if odds:
                print(f"    üí∞ {len(odds)} mercados: {list(odds.keys())}")
        
        # Testar busca de partidas ao vivo
        print("\nüî¥ Testando live matches...")
        live = await provider.get_live_odds()
        print(f"‚úÖ {len(live)} partidas ao vivo encontradas")
        
        for match in live[:2]:  # Mostrar apenas 2
            print(f"  üì∫ {match['match']} ({match.get('league', 'N/A')})")
            odds = match.get('odds', {})
            if odds:
                print(f"    üí∞ {len(odds)} mercados: {list(odds.keys())}")
        
        print("\n‚úÖ PandaScoreProvider funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no PandaScoreProvider: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_engine_integration():
    """Teste da integra√ß√£o com o engine"""
    print("\nü§ñ TESTANDO INTEGRA√á√ÉO COM ENGINE")
    print("=" * 50)
    
    try:
        from src.engine import OpeningEngine
        
        engine = OpeningEngine()
        print(f"‚úÖ Engine inicializado com provider: {engine.provider.name}")
        
        # Testar an√°lise de oportunidades (com dados mock)
        sample_match = {
            'match': 'T1 vs Gen.G',
            'league': 'LCK',
            'odds': {
                'ML': {'T1': 1.85, 'Gen.G': 2.10}
            }
        }
        
        opportunities = engine.find_value_opportunities(sample_match)
        print(f"üéØ Oportunidades encontradas: {len(opportunities)}")
        
        for name, details in opportunities.items():
            print(f"  üíé {name}: {details}")
        
        print("‚úÖ Engine funcionando corretamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no Engine: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_notifier():
    """Teste do sistema de notifica√ß√µes"""
    print("\nüì± TESTANDO SISTEMA DE NOTIFICA√á√ïES")
    print("=" * 50)
    
    try:
        from src.notifier import TelegramNotifier
        
        notifier = TelegramNotifier()
        
        # Teste notifica√ß√£o de abertura
        await notifier.notify({
            'type': 'OPENING',
            'match': 'T1 vs Gen.G',
            'odds': {
                'ML': {'T1': 1.85, 'Gen.G': 2.10},
                'FirstBlood': {'T1': 1.90, 'Gen.G': 1.90}
            }
        })
        print("‚úÖ Notifica√ß√£o de abertura enviada")
        
        # Teste notifica√ß√£o ao vivo
        await notifier.notify({
            'type': 'LIVE',
            'match': 'BLG vs JDG',
            'league': 'LPL',
            'status': 'running',
            'odds': {
                'ML_BLG': {
                    'current': 2.10,
                    'fair': 1.85,
                    'edge': 13.5
                }
            }
        })
        print("‚úÖ Notifica√ß√£o ao vivo enviada")
        
        print("‚úÖ Sistema de notifica√ß√µes OK!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no Notifier: {e}")
        import traceback
        traceback.print_exc()
        return False

def print_config_status():
    """Mostra status da configura√ß√£o"""
    print("‚öôÔ∏è CONFIGURA√á√ÉO ATUAL")
    print("=" * 50)
    
    config_items = [
        ("ODDS_PROVIDER", os.getenv('ODDS_PROVIDER', 'MOCK')),
        ("PANDASCORE_TOKEN", f"{os.getenv('PANDASCORE_TOKEN', 'N√ÉO CONFIGURADO')[:8]}..." if os.getenv('PANDASCORE_TOKEN') else 'N√ÉO CONFIGURADO'),
        ("MONITORED_LEAGUES", os.getenv('MONITORED_LEAGUES', 'TODAS')),
        ("TELEGRAM_BOT_TOKEN", "CONFIGURADO" if os.getenv('TELEGRAM_BOT_TOKEN') else "N√ÉO CONFIGURADO"),
        ("TELEGRAM_CHAT_ID", "CONFIGURADO" if os.getenv('TELEGRAM_CHAT_ID') else "N√ÉO CONFIGURADO"),
        ("EDGE_THRESHOLD", f"{float(os.getenv('EDGE_THRESHOLD', '0.05')) * 100:.1f}%"),
        ("POLL_INTERVAL_SECONDS", f"{os.getenv('POLL_INTERVAL_SECONDS', '60')}s"),
    ]
    
    for key, value in config_items:
        print(f"  {key}: {value}")

async def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTES DAS CORRE√á√ïES")
    print("=" * 60)
    
    print_config_status()
    
    results = []
    
    # Teste MockProvider (sempre deve funcionar)
    results.append(await test_mock_provider())
    
    # Teste PandaScore (se configurado)
    if os.getenv('PANDASCORE_TOKEN'):
        results.append(await test_pandascore_provider())
    else:
        print("\n‚è≠Ô∏è Pulando teste PandaScore (token n√£o configurado)")
        results.append(True)  # N√£o contar como falha
    
    # Teste Engine
    results.append(await test_engine_integration())
    
    # Teste Notifier
    results.append(await test_notifier())
    
    # Resultado final
    print("\n" + "=" * 60)
    success_count = sum(results)
    total_tests = len(results)
    
    if success_count == total_tests:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Bot est√° funcionando corretamente")
    else:
        print(f"‚ö†Ô∏è {success_count}/{total_tests} TESTES PASSARAM")
        print("‚ùå H√° problemas que precisam ser corrigidos")
    
    print(f"\nüí° Pr√≥ximos passos:")
    if os.getenv('ODDS_PROVIDER') == 'MOCK' or not os.getenv('PANDASCORE_TOKEN'):
        print("  1. Configure PANDASCORE_TOKEN no .env")
        print("  2. Configure ODDS_PROVIDER=PANDASCORE no .env")
    print("  3. Execute: python main.py")
    print("  4. Monitore os logs para identificar outros problemas")

if __name__ == "__main__":
    # Adicionar diret√≥rio src ao Python path
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro fatal no teste: {e}")
        import traceback
        traceback.print_exc()
